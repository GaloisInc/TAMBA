-- This SQL file is runnable (repeatedly) via
--
-- $ psql < schema.txt
-- the schema used is the MedEvac schema. See Dave Archer for the schema definition
--

BEGIN;

-- delete all TABLEs if they exist, so we start from scratch

-- primary TABLEs
DROP TABLE IF EXISTS organization CASCADE;
DROP TABLE IF EXISTS force CASCADE;
DROP TABLE IF EXISTS community CASCADE;
DROP TABLE IF EXISTS shiptype CASCADE;
DROP TABLE IF EXISTS shiptype CASCADE;
DROP TABLE IF EXISTS ship CASCADE;
DROP TABLE IF EXISTS berth CASCADE;
DROP TABLE IF EXISTS evacuee CASCADE;

-- TABLEs generated by relations
DROP TABLE IF EXISTS hasberth;
DROP TABLE IF EXISTS reservedfor;
DROP TABLE IF EXISTS disclosesto;
DROP TABLE IF EXISTS shareswith;

DROP TYPE IF EXISTS stypes;
DROP TYPE IF EXISTS btype;
DROP TYPE IF EXISTS cond;
DROP TYPE IF EXISTS gen;
DROP TYPE IF EXISTS disclevel;
-- CREATE all TABLEs

-- primary TABLEs
CREATE TABLE organization (
  id bigserial PRIMARY KEY,
  organization_name text NOT NULL
);

CREATE TABLE force (
  id bigserial PRIMARY KEY,
  force_name text NOT NULL,
  organization_id bigint REFERENCES organization NOT NULL
);

CREATE TABLE community (
  id bigserial PRIMARY KEY,
  community_name text NOT NULL,
  community_location bigint,
  organization_id bigint REFERENCES organization NOT NULL
);

CREATE TYPE stypes AS ENUM ('CG','CVN','AGOS','SSN','AH','Frigate');
CREATE TABLE shiptype (
  id bigserial PRIMARY KEY,
  stype stypes,
  offensiverange integer,
  cruisingspeed integer
);

CREATE TABLE ship (
  id bigserial PRIMARY KEY,
  ship_name text NOT NULL,
  ship_location bigint,
  ship_destination bigint,
  ship_heading integer,
  force_id bigint REFERENCES force NOT NULL,
  shiptype_id bigint REFERENCES shiptype NOT NULL
);

CREATE TYPE btype AS ENUM ('bunk','hospital','ICU','biohazard');

CREATE TABLE berth (
  id bigserial PRIMARY KEY,
  berth_type btype,
  occupied Boolean
);

CREATE TYPE cond AS ENUM ('grave','poor','fair','good');
CREATE TYPE gen AS ENUM ('M','F','T');
CREATE TABLE evacuee (
  id bigserial PRIMARY KEY,
  familyname text NOT NULL,
  givenname text,
  gender gen,
  ZV1Positive Boolean,
  birthdate date,
  requiresICU Boolean,
  condition cond,
  community_id bigint REFERENCES community NOT NULL 
);

-- relation-derived TABLEs

CREATE TABLE hasberth (
  ship_id bigint REFERENCES ship NOT NULL,
  berth_id bigint REFERENCES berth NOT NULL,
  PRIMARY KEY (ship_id, berth_id)
);

CREATE TABLE reservedfor (
  berth_id bigint REFERENCES berth NOT NULL,
  evacuee_id bigint REFERENCES evacuee NOT NULL,
  fromdate date,
  todate date,
  PRIMARY KEY (berth_id,evacuee_id)
);

CREATE TYPE disclevel AS ENUM ('None','Aggregate','Full');
CREATE TABLE disclosesto (
  organization_id bigint REFERENCES organization NOT NULL,
  evacuee_id bigint REFERENCES evacuee NOT NULL,
  disclosurelevel disclevel,
  PRIMARY KEY (organization_id, evacuee_id)
);

CREATE TABLE shareswith (
  organization1_id bigint REFERENCES organization NOT NULL,
  organization2_id bigint REFERENCES organization NOT NULL,
  trustlevel disclevel,
  PRIMARY KEY (organization1_id, organization2_id)
);

-- add sample data into TABLEs
INSERT INTO organization (id, organization_name) VALUES
  (1,'USA'),
  (2,'NZ'),
  (3,'South Korea'),
  (4,'PRC'),
  (5,'Philipplines'),
  (6,'International Red Cross'),
  (7,'United Nations');

INSERT INTO force (force_name, organization_id) VALUES
  ('USN',1),
  ('NZN',2),
  ('SKN',3),
  ('PRN',4),
  ('Phil. Navy',5),
  ('Red Cross Navy',6),
  ('USMC',1),
  ('Italian Navy',7),
  ('French Navy',7);

INSERT INTO community (id, community_name, community_location, organization_id) VALUES
  (1,'city1',4,5),
  (2,'city2',15,5),
  (3,'city3',32,3),
  (4,'city4',45,5),
  (5,'city5',63,3),
  (6,'city6',79,3);

INSERT INTO shiptype (id, stype, cruisingspeed, offensiverange) VALUES
  (1,'CG',4, 8),
  (2,'CVN',3, 10),
  (3,'AGOS',6, 0),
  (4,'SSN',7, 3),
  (5,'AH',2, 0),
  (6, 'Frigate', 4, 6);

INSERT INTO ship (id, ship_name, ship_location, ship_destination, ship_heading, force_id, shiptype_id) VALUES
  (1,'USS Lake Champlain CG-57', 2, 41, 1, 1, 1),
  (2,'USS Abraham Lincoln CVN-72', 3, 42, 1, 1, 2),
  (3,'PRN Fake Name 1', 12, 27, 2, 4, 6),
  (4, 'HMNZS Achilles', 20, 78, 1, 2, 1),
  (5, 'USNS Comfort', 35, 15, 1, 6, 5);

INSERT INTO berth (id, berth_type, occupied) VALUES
  (1,'bunk',FALSE),
  (2,'bunk',FALSE),
  (3,'hospital',FALSE),
  (4,'hospital',FALSE),
  (5,'hospital',TRUE),
  (6,'hospital',FALSE),
  (7,'hospital',FALSE),
  (8,'hospital',FALSE),
  (9,'ICU',FALSE),
  (10,'ICU',TRUE),
  (11,'ICU',FALSE),
  (12,'biohazard',FALSE),
  (13,'biohazard',FALSE),
  (14,'bunk',FALSE),
  (15,'hospital',FALSE),
  (16,'ICU',FALSE),
  (17,'biohazard',FALSE);

INSERT INTO evacuee (id, familyname, givenname, gender, ZV1Positive, birthdate, requiresICU, condition, community_id) VALUES
  (1,'Smith','John','M',FALSE,'19620309', FALSE, 'good', 1),
  (2,'Doe','Jane','F',TRUE,'19810509', FALSE,'poor',2),
  (3,'Doe','John','M',TRUE,'19800913', TRUE,'poor',2),
  (4,'Green','Lorne','M',FALSE,'19210814',TRUE,'fair',3);

INSERT INTO hasberth (ship_id,berth_id) VALUES
  (1,1),
  (1,3),
  (2,2),
  (2,4),
  (2,5),
  (3,14),
  (4,15),
  (4,16),
  (4,17),
  (5,6),
  (5,7),
  (5,8),
  (5,9),
  (5,10),
  (5,11),
  (5,12),
  (5,13);

INSERT INTO reservedfor (berth_id, evacuee_id, fromdate, todate) VALUES
  (1,1,'20160215', '20160217'),
  (16,4,'20160301','20160312');

INSERT INTO disclosesto (organization_id, evacuee_id, disclosurelevel) VALUES
  (1, 1, 'Full'),
  (2, 1, 'None'),
  (3, 1, 'Full'),
  (4, 1, 'None'),
  (5, 1, 'None'),
  (6, 1, 'None'),
  (7, 1, 'Full'),
  (1, 2, 'Full'),
  (2, 2, 'None'),
  (3, 2, 'Full'),
  (4, 2, 'None'),
  (5, 2, 'None'),
  (6, 2, 'None'),
  (7, 2, 'Full'),
  (1, 3, 'None'),
  (2, 3, 'None'),
  (3, 3, 'None'),
  (4, 3, 'None'),
  (5, 3, 'None'),
  (6, 3, 'None'),
  (7, 3, 'None'),
  (1, 4, 'Full'),
  (2, 4, 'Full'),
  (3, 4, 'Full'),
  (4, 4, 'Full'),
  (5, 4, 'Full'),
  (6, 4, 'None'),
  (7, 4, 'None');

INSERT INTO shareswith (organization1_id, organization2_id, trustlevel) VALUES
  (1,1,'Full'),
  (1,2,'Full'),
  (1,3,'Full'),
  (1,4,'None'),
  (1,5,'None'),
  (1,6,'Full'),
  (1,7,'None'),
  (2,1,'Full'),
  (2,2,'Full'),
  (2,3, 'None'),
  (2,4, 'None'),
  (2,5, 'Full'),
  (2,6, 'Full'),
  (2,7, 'Full'),
  (3,1, 'Full'),
  (3,2, 'None'),
  (3,3, 'Full'),
  (3,4, 'None'),
  (3,5, 'Full'),
  (3,6, 'Full'),
  (3,7, 'Full'),
  (4,1, 'None'),
  (4,2, 'None'),
  (4,3, 'None'),
  (4,4, 'Full'),
  (4,5, 'None'),
  (4,6, 'None'),
  (4,7, 'None'),
  (5,1, 'None'),
  (5,2, 'None'),
  (5,3, 'None'),
  (5,4, 'None'),
  (5,5, 'Full'),
  (5,6, 'None'),
  (5,7, 'None'),
  (6,1,'Full'),
  (6,2,'Full'),
  (6,3,'Full'),
  (6,4,'Full'),
  (6,5,'Full'),
  (6,6,'Full'),
  (6,7,'Full'),
  (7,1,'Full'),
  (7,2,'Full'),
  (7,3,'Full'),
  (7,4,'Full'),
  (7,5,'Full'),
  (7,6,'Full'),
  (7,7,'Full');

-- Queries related to evacuation operations
-- 

--------------------------------------------
-- List names, types, and unoccupied berth counts of all ships and prioritize them by quickest arrival at city1
-- Role: Community Emergency Response Coordinator

-- first, show this with no policy applied
SELECT 
    ship_name, 
    stype AS ship_type, 
    count(*) AS Number_Of_Berths, 
    ((ship_location - community_location)/cruisingspeed) AS eta
FROM ship
     JOIN shiptype ON ship.shiptype_id = shiptype.id
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id,
     community
WHERE (community.community_name = 'city5') AND (occupied = FALSE)
GROUP BY ship_name, stype, ship_location, community_location, cruisingspeed
ORDER BY eta;

-- next, with privacy: show the view from the USA's credential; note that PRC's ship is missing in the result
SELECT 
    ship_name, 
    stype AS ship_type, 
    count(*) AS Number_Of_Berths, 
    ((ship_location - community_location)/cruisingspeed) AS eta
FROM ship
     JOIN shiptype ON ship.shiptype_id = shiptype.id
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
     JOIN force ON ship.force_id = force.id
     JOIN organization ON organization.id = force.organization_id
     JOIN shareswith ON shareswith.organization1_id = organization.id,
     community
WHERE (community.community_name = 'city5') AND (occupied = FALSE) AND (organization2_id = 1) AND (trustlevel = 'Full')
GROUP BY ship_name, stype, ship_location, community_location, cruisingspeed
ORDER BY eta;
--------------------------------------------
-- Count the total number of biohazard evacuation berths available in all forces
-- Role: Search & Rescue specialist
-- no policy applied
SELECT count(*) AS Number_Of_ICU_Berths
FROM ship
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
WHERE (berth_type = 'biohazard') AND (occupied = FALSE);

-- and again, with policy and with credential set to USA
SELECT count(*) AS Number_Of_ICU_Berths
FROM ship
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
     JOIN force ON ship.force_id = force.id
     JOIN organization ON organization.id = force.organization_id
     JOIN shareswith ON shareswith.organization1_id = organization.id
WHERE (berth_type = 'biohazard') AND (occupied = FALSE) AND (organization2_id = 1) AND (trustlevel = 'Full');

--------------------------------------------

-- List names and genders of all evacuees that are HIV positive
-- Role: Intelligence Analyst
-- first, without privacy
--
SELECT givenname, familyname 
FROM evacuee
WHERE ZV1Positive = TRUE;

-- now with privacy and credential of the USA
SELECT givenname, familyname 
FROM evacuee
     JOIN disclosesto ON evacuee.id = disclosesto.evacuee_id
     JOIN organization ON disclosesto.organization_id = organization.id
WHERE ZV1Positive = TRUE AND disclosurelevel = 'Full' AND organization_name = 'USA'; 
--------------------------------------------

--
-- Omit this query because it's not a reasonable ask for a coalition database:
--
-- How far out of range are adversarial pairs of ships?
-- Role: naval commander
--SELECT s1.ship_name, GREATEST(((s1.ship_location - s2.ship_location) - st.offensiverange),0) AS range, s2.ship_name 
--FROM ship s1
--     JOIN force o1 ON s1.force_id = o1.id
--     JOIN shiptype st ON s1.shiptype_id = st.id
--     JOIN organization or1 ON or1.id = o1.organization_id
--     CROSS JOIN ship s2
--     JOIN force o2 ON s2.force_id = o2.id
--     JOIN organization or2 ON or2.id = o2.organization_id
--     JOIN shareswith sw ON sw.organization1_id = or1.id AND sw.organization2_id = or2.id
--     WHERE sw.trustlevel = 'None'
--GROUP BY s1.ship_name, s2.ship_name, s1.ship_location, s2.ship_location, st.offensiverange
--ORDER BY range;

--------------------------------------------
-- How many more evacuation berths of each type are needed in this response effort?
-- Role: UN secretary for emergency relief
-- TODO: apply privacy to this query, showing where DP applies to 'Aggregate' trust level

SELECT 'Bunk' AS bed_type, count(*) AS number_of_beds
-- bunks are for evacuees in good condition who are not ZV1 positive
FROM evacuee
WHERE (ZV1Positive = FALSE) AND (condition = 'good')
UNION
-- hospital beds are for evacuees in fair or poor condition who are not ZV1 positive
SELECT 'Hospital bed', count(*)
FROM evacuee
WHERE (ZV1Positive = FALSE) AND ((condition = 'fair') OR (condition = 'poor'))
UNION
-- ICU beds are for evacuees in grave condition, regardless of ZV1 diagnosis
SELECT 'ICU bed', count(*)
FROM evacuee
WHERE condition = 'grave'
UNION
-- finally, biohazard beds are for evacuees in good, fair, or poor condition who have ZV1
SELECT 'Biohazard bed', count(*)
FROM evacuee
WHERE (ZV1Positive = TRUE) AND (NOT(condition='grave'));
--------------------------------------------

-- What ship is evacuee John Doe occupying a berth on (ask by USA, whom he trusts)?
-- Role: several
SELECT 'John Doe can be found on ' AS _, ship_name AS _, 'in berth' AS _, berth.id AS _
FROM ship
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
     JOIN reservedfor ON reservedfor.berth_id = berth.id
     JOIN evacuee ON evacuee.id = reservedfor.evacuee_id
     JOIN disclosesto ON evacuee.id = disclosesto.evacuee_id
     JOIN organization ON disclosesto.organization_id = organization.id
WHERE (current_date >= fromdate) AND (current_date <= todate) AND disclosurelevel = 'Full' AND organization_name = 'USA'; 


-- What ship is evacuee John Doe occupying a berth on (ask by PRC, whom he distrusts)?
-- Role: several
SELECT 'John Doe can be found on ' AS _, ship_name AS _, 'in berth' AS _, berth.id AS _
FROM ship
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
     JOIN reservedfor ON reservedfor.berth_id = berth.id
     JOIN evacuee ON evacuee.id = reservedfor.evacuee_id
     JOIN disclosesto ON evacuee.id = disclosesto.evacuee_id
     JOIN organization ON disclosesto.organization_id = organization.id
WHERE (current_date >= fromdate) AND (current_date <= todate) AND disclosurelevel = 'Full' AND organization_name = 'PRC'; 
--------------------------------------------

-- 
-- Queries related to drawing the COP 
-- 

--------------------------------------------

-- List the names, locations, force affiliations, cruising speed, and berth occupancy rate of all ships
-- first without policies
SELECT ship_name, ship_location, force_name, cruisingspeed, count(*) AS berths
FROM ship
     JOIN force ON ship.force_id = force.id
     JOIN shiptype ON ship.shiptype_id = shiptype.id
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
GROUP BY ship_name, ship_location, force_name, cruisingspeed
ORDER BY berths;

-- and now using the credential of the USA, with privacy applied
SELECT ship_name, ship_location, force_name, cruisingspeed, count(*) AS berths
FROM ship
     JOIN force ON ship.force_id = force.id
     JOIN shiptype ON ship.shiptype_id = shiptype.id
     JOIN hasberth ON ship.id = hasberth.ship_id
     JOIN berth ON berth.id = hasberth.berth_id
-- the next 3 lines comprise the privacy policy enforcement part of the query
     JOIN organization on organization.id = force.organization_id
     JOIN shareswith on organization.id = shareswith.organization1_id
WHERE (organization2_id = 1) AND (trustlevel = 'Full')
--
GROUP BY ship_name, ship_location, force_name, cruisingspeed
ORDER BY berths;


--------------------------------------------

-- List the names, locations, organization affiliations, and evacuee populations of all communities
-- without privacy applied
SELECT community_name, community_location, organization_name, count(*) AS evacuees
FROM community
     JOIN organization ON organization.id = community.organization_id
     JOIN evacuee ON community.id = evacuee.community_id
GROUP BY community_name, community_location, organization_name
ORDER BY evacuees;

-- with privacy applied and credential of USA
SELECT community_name, community_location, organization_name, count(*) AS evacuees
FROM community
     JOIN organization ON organization.id = community.organization_id
     JOIN evacuee ON community.id = evacuee.community_id
     JOIN shareswith ON organization.id = shareswith.organization1_id
WHERE (organization2_id = 1) AND (trustlevel = 'Full')
GROUP BY community_name, community_location, organization_name
ORDER BY evacuees;

commit;
